----------------------------------------------------------------------------------
-- Company: 
-- Engineer: 
-- 
-- Create Date: 08.04.2019 14:22:05
-- Design Name: 
-- Module Name: controlador - Behavioral
-- Project Name: 
-- Target Devices: 
-- Tool Versions: 
-- Description: 
-- 
-- Dependencies: 
-- 
-- Revision:
-- Revision 0.01 - File Created
-- Additional Comments:
-- 
----------------------------------------------------------------------------------


library IEEE;
use IEEE.STD_LOGIC_1164.ALL;

-- Uncomment the following library declaration if using
-- arithmetic functions with Signed or Unsigned values
--use IEEE.NUMERIC_STD.ALL;

-- Uncomment the following library declaration if instantiating
-- any Xilinx leaf cells in this code.
--library UNISIM;
--use UNISIM.VComponents.all;

entity controlador is
    Generic (N : integer := 4);
    Port ( clk:       in std_logic;
           rst:       in std_logic;
           button:    in std_logic;
           A:         in std_logic_vector (N-1 downto 0);
           led:       out std_logic_vector (N-1 downto 0)
    );
end controlador;

architecture Behavioral of controlador is

--ESTADOS
type estados is (init, click1, wait1, click2, wait2, click3, wait3, show_result);
-- Click1, wait1: primeiro número
-- Click2, wait2: segundo número
-- Click3, wait3: terceiro número

signal estado_atual: estados;
signal proximo_estado: estados;

signal led2 : std_logic_vector (N-1 downto  0);
signal sQ: std_logic_vector (N-1 downto 0);
signal s_mux: std_logic_vector (N-1 downto 0);
signal s_ld: std_logic;
signal s_lt: std_logic;

begin

    process(clk, rst)
        begin
             if (rst='1') then
                estado_atual <= init;
             elsif(rising_edge(clk)) then
                estado_atual <= proximo_estado;
             end if;
    end process;    

    process(estado_atual)
        begin
             case estado_atual is
                when init =>
                    -- saídas: 
                        led2 <= "0000";
                    -- logica de transição:
                        proximo_estado <= click1;
                when click1 =>
                    -- Espera o botão ser apertado
                        led2 <= "0000";
                    --lógica de transição
                        if (button = '1') then
                            proximo_estado <= wait1;
                        else
                            proximo_estado <= click1;
                        end if;
                when wait1 =>
                    --saídas
                        led2 <= "0001";
                    --lógica de transição
                        if (button = '1') then
                            proximo_estado <= wait1;
                        else
                            proximo_estado <= click2;
                        end if;
                when click2 =>
                    --saídas
                        led2 <= "0000";
                    --lógica de transição
                        if (button = '1') then
                            proximo_estado <= wait2;
                        else
                            proximo_estado <= click2;
                        end if;
                when wait2 =>
                    --saídas
                        led2 <= "0010";
                    --lógica de transição
                        if (button = '1') then
                            proximo_estado <= wait2;
                        else
                            proximo_estado <= click3;
                        end if;
                when click3 =>
                    --saídas
                        led2 <= "0000";
                    --lógica de transição
                        if (button = '1') then
                            proximo_estado <= wait3;
                        else
                            proximo_estado <= click3;
                        end if;
                when wait3 =>
                    --saídas
                        led2 <= "0100";
                    --lógica de transição
                        if (button = '1') then
                            proximo_estado <= wait3;
                        else
                            proximo_estado <= show_result;
                        end if;
                when show_result =>
                    --saídas
                        led2 <= s_mux;
                    --lógica de transição
                        if (rst = '1') then
                            proximo_estado <= init;
                        else
                            proximo_estado <= show_result;
                        end if;
             end case;
    end process;

    REG: entity work.reg
        Generic map (N => N)
        Port map(D      => s_mux,
                 ld   => s_ld,
                 rst  => rst,
                 clk    => clk,
                 Q      => sQ
                 );
    
    COMP: entity work.comp_lt
           Generic map (N => N)
           Port map ( A => A,
                      B_1 => sQ,
                      lt => s_lt);
    
    --Maior valor
    s_mux <= A when A >= sQ else sQ;
    --Conexão da porta de saída "led" com o sinal led2
    led <= led2;
    s_ld <= s_lt and button;
    
end Behavioral;
